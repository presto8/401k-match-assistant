#!/usr/bin/env python

import argparse
import configparser
import csv
import decimal
import inspect
import sys

from dataclasses import dataclass
from datetime import datetime
from decimal import Decimal
from typing import Optional


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--paystub', required=True, help='paystub to process (either csv or config')
    parser.add_argument('--config', default="employee.config", help='config file containing employee information')
    parser.add_argument('--verbose', default=False, action='store_true', help='show more detailed messages')
    parser.add_argument('values', nargs='*', help='set paystub values (overrides config and paystub file)')
    return parser.parse_args()


def main():
    ARGS._config = read_config(ARGS.config)['general']

    paystub = load_paystub(ARGS.paystub)
    for value in ARGS.values:
        key, _, val = value.partition('=')
        setattr(paystub, key, D(val))

    validate_paystub(paystub)

    print(paystub)
    analysis = analyze(paystub)
    print()
    print_analysis(analysis)
    print()
    print_checks(analysis)


def load_paystub(path):
    if path.endswith('.csv'):
        csv_data = read_csv(path)
        paystub = normalize_csv(csv_data)
    else:
        paystub_config = read_config(path)
        paystub = normalize_paystub_config(paystub_config)
    return paystub


def D(arg):
    return decimal.Decimal(arg).quantize(decimal.Decimal('.01'))


def as_D(func):
    def wrap(*args, **kwargs):
        return D(func(*args, **kwargs))
    return wrap


def cfg(key, cast=D):
    try:
        return cast(ARGS._config[key])
    except KeyError:
        raise Fail(f"config file [{ARGS.config}] missing required value for '{key}'")


def dd(*args, **kwargs):
    "Print debug information including function name and line number."
    if ARGS.verbose:
        caller = inspect.stack()[1]
        print(f'<{caller.function}:{caller.lineno}>', *args, **kwargs)


class Fail(Exception):
    pass


@dataclass
class Paystub:
    paystub_date: Optional[datetime.date] = None

    cur_base_wages: Decimal = D(0)
    ytd_base_wages: Decimal = D(0)
    ytd_apb_bonus: Decimal = D(0)
    ytd_qpb_bonus: Decimal = D(0)

    cur_pretax_regular: Decimal = D(0)
    cur_aftertax_regular: Decimal = D(0)

    ytd_pretax_regular: Decimal = D(0)
    ytd_pretax_bonus: Decimal = D(0)
    ytd_pretax_employer_match: Decimal = D(0)
    ytd_pretax_employer_apb_match: Decimal = D(0)

    ytd_aftertax_regular: Decimal = D(0)
    ytd_aftertax_bonus: Decimal = D(0)


@dataclass
class AnalyzedPaystub:
    aggregate_limit: Decimal = D(0)
    deferral_limit: Decimal = D(0)
    catchup_limit: Decimal = D(0)

    age_adjusted_aggregate_limit: Decimal = D(0)
    age_adjusted_deferral_limit: Decimal = D(0)

    aftertax_limit: Decimal = D(0)

    ytd_base_wages: Decimal = D(0)
    ytd_pretax_employee: Decimal = D(0)
    ytd_pretax_match: Decimal = D(0)
    ytd_aftertax_employee: Decimal = D(0)

    paystubs_remaining: int = 0

    est_remaining_base_wages: Decimal = D(0)
    est_remaining_pretax_employee: Decimal = D(0)
    est_remaining_pretax_match: Decimal = D(0)
    est_remaining_aftertax_employee: Decimal = D(0)

    base_wages: Decimal = D(0)

    over_paystub: Optional[int] = None

    contrib_pretax_regular: Decimal = D(0)
    contrib_aftertax_regular: Decimal = D(0)
    match_pretax_regular: Decimal = D(0)

    eoy_age: int = 0

    @property
    def pretax_employee(self):
        return self.ytd_pretax_employee + self.est_remaining_pretax_employee

    @property
    def pretax_match(self):
        return self.ytd_pretax_match + self.est_remaining_pretax_match

    @property
    def aftertax_employee(self):
        return self.ytd_aftertax_employee + self.est_remaining_aftertax_employee


def read_config(path):
    config = configparser.ConfigParser()
    config.read(path)
    dd(f"processed {path}")
    return config


def read_csv(path):
    result = []
    with open(path) as csvfile:
        reader = csv.reader(csvfile)
        result = list(reader)
    return result


@as_D
def read_cell(cell) -> D:
    if cell == "":
        return "0"
    return cell


def normalize_csv(csv) -> Paystub:
    result = Paystub()
    date_rownum = None
    for rownum, row in enumerate(csv):
        label, *cols = row
        label = label.lower()
        if 'base wages for salary pay' in label:
            print(cols)
            result.cur_base_wages = D(cols[3])
            result.ytd_base_wages = D(cols[4])
        elif 'annual performance bonus' in label:
            result.ytd_apb_bonus = D(cols[4])
        elif 'quarterly performance bonus' in label:
            result.ytd_qpb_bonus = D(cols[4])
        elif '401k deduction' in label:
            result.cur_pretax_regular = D(cols[0])
            result.ytd_pretax_regular = D(cols[1])
        elif '401k bonus' in label:
            result.ytd_pretax_bonus = D(cols[1])
        elif '401k employer match' in label:
            if 'apb' in label:
                result.ytd_pretax_employer_apb_match = D(cols[1])
            else:
                result.ytd_pretax_employer_match = D(cols[1])
        elif 'after tax base pay' in label:
            result.cur_aftertax_regular = read_cell(cols[0])
            result.ytd_aftertax_regular = D(cols[1])
        elif 'after tax bonus & commission' in label:
            result.ytd_aftertax_bonus = D(cols[1])
        elif 'payslip information' in label:
            date_rownum = rownum + 2
        elif rownum == date_rownum:
            result.paystub_date = datetime.strptime(cols[3], "%m/%d/%Y").date()

    return result


def normalize_paystub_config(pc) -> Paystub:
    def c(key, cast=D):
        return cast(pc['paystub'][key])

    result = Paystub()
    result.paystub_date = c('paystub_date', lambda x: datetime.strptime(x, "%m/%d/%Y").date())

    for field in "cur_base_wages ytd_base_wages cur_pretax_regular ytd_pretax_regular ytd_pretax_bonus ytd_pretax_employer_apb_match ytd_pretax_employer_match cur_aftertax_regular ytd_aftertax_regular".split():
        setattr(result, field, c(field))

    return result


def validate_paystub(paystub: Paystub):
    required_fields = "cur_base_wages cur_pretax_regular".split()
    # required_fields = [x for x in dir(paystub) if not x.startswith('_')]
    for key in required_fields:
        try:
            assert getattr(paystub, key) > D(0)
        except (decimal.InvalidOperation, AssertionError):
            raise Fail(f"required field missing: {key}")


def calculate_paystubs_remaining(paystub_date: datetime.date) -> int:
    paystubs = 24
    paystubs -= 2 * (paystub_date.month - 1)
    if paystub_date.day > 20:
        paystubs -= 2
    else:
        paystubs -= 1
    return paystubs


@as_D
def calculate_employee_limit(paystub_date: datetime.date) -> D:
    return {
        2021: 19_500,
        2022: 20_500,
        2023: 22_500,
        2024: 23_000,
    }[paystub_date.year]


@as_D
def calculate_annual_limit(paystub_date: datetime.date) -> D:
    return {
        2021: 58_000,
        2022: 61_000,
        2023: 66_000,
        2024: 69_000,
    }[paystub_date.year]


@as_D
def calculate_catchup_limit(paystub_date: datetime.date, eoy_age: int) -> D:
    if eoy_age < 50:
        return 0
    return {
        2021: 6500,
        2022: 6500,
        2023: 7500,
        2024: 7500,
    }[paystub_date.year]


def calculate_employer_match_limit(aggregate_limit: D) -> D:
    """[...] an employerâ€™s deduction for contributions to a defined
    contribution plan (profit-sharing plan or money purchase pension plan)
    cannot be more than 25% of the compensation paid (or accrued) during the
    year to eligible employees participating in the plan (see Employer
    Deduction in Publication 560, Retirement Plans for Small Business (SEP,
    SIMPLE, and Qualified Plans). Reference: https://www.irs.gov/retirement-plans/plan-participant-employee/retirement-topics-401k-and-profit-sharing-plan-contribution-limits"""
    return D(0.25) * aggregate_limit


def estimate_bonus_remaining(paystub) -> Decimal:
    # If paystub is after the last bonus date, there is no need for an estimate.
    if paystub.paystub_date >= paystub.paystub_date.replace(month=10):
        return D(0)

    result = D(0)

    # If APB bonus has not been paid yet, estimate it based on last year
    if paystub.ytd_apb_bonus == D(0):
        result += cfg('prior_year_apb_bonus')

    # If YTD QPB bonus is less than 85% of last year's QPB bonus,
    # assume that not all QPB bonus has been paid yet and include the
    # difference in the estimate. Use 85% to account for potential loss of
    # bonus.
    if paystub.ytd_qpb_bonus < D(0.85) * cfg('prior_year_qpb_bonus'):
        result += cfg('prior_year_qpb_bonus') - paystub.ytd_qpb_bonus

    return result


def derive(paystub: Paystub) -> AnalyzedPaystub:
    a = AnalyzedPaystub()

    a.paystubs_remaining = calculate_paystubs_remaining(paystub.paystub_date)
    a.deferral_limit = calculate_employee_limit(paystub.paystub_date)
    a.aggregate_limit = calculate_annual_limit(paystub.paystub_date)
    # a.employer_match_limit = calculate_employer_match_limit(a.aggregate_limit)
    a.base_wages = paystub.ytd_base_wages

    a.eoy_age = cfg('employee_age_on_december_31', cast=int)
    a.catchup_limit = calculate_catchup_limit(paystub.paystub_date, a.eoy_age)

    a.age_adjusted_deferral_limit = a.deferral_limit + a.catchup_limit
    a.age_adjusted_aggregate_limit = a.aggregate_limit + a.catchup_limit

    contribution_rate_pretax_bonus = cfg('contribution_rate_pretax_bonus')
    # contribution_rate_aftertax_bonus = cfg('contribution_rate_aftertax_bonus')
    max_employer_match = cfg('max_employer_match', cast=float)

    a.contrib_pretax_regular = paystub.cur_pretax_regular / paystub.cur_base_wages
    a.match_pretax_regular = D(min(a.contrib_pretax_regular, 0.05))
    a.contrib_aftertax_regular = paystub.cur_aftertax_regular / paystub.cur_base_wages

    a.ytd_pretax_employee = paystub.ytd_pretax_regular + paystub.ytd_pretax_bonus
    a.ytd_pretax_match = paystub.ytd_pretax_employer_match + paystub.ytd_pretax_employer_apb_match
    a.ytd_aftertax_employee = paystub.ytd_aftertax_regular + paystub.ytd_aftertax_bonus

    bonus_remaining = estimate_bonus_remaining(paystub)
    a.est_remaining_pretax_employee = bonus_remaining * contribution_rate_pretax_bonus
    match_pretax_bonus = D(min(contribution_rate_pretax_bonus, max_employer_match))
    a.est_remaining_pretax_match = bonus_remaining * match_pretax_bonus

    return a


def analyze(paystub: Paystub) -> AnalyzedPaystub:
    a = derive(paystub)

    paystubs_ytd = 24 - a.paystubs_remaining

    print(f"simulating {a.paystubs_remaining} paystubs")
    for i in range(a.paystubs_remaining):
        a.est_remaining_base_wages += paystub.cur_base_wages
        a.base_wages += paystub.cur_base_wages
        if a.pretax_employee < a.age_adjusted_deferral_limit:
            a.est_remaining_pretax_employee += paystub.cur_pretax_regular
            overage = a.pretax_employee - a.age_adjusted_deferral_limit
            if overage > 0:
                a.over_paystub = paystubs_ytd + i + 1
                a.est_remaining_pretax_employee -= overage
            a.est_remaining_pretax_match += paystub.cur_base_wages * a.match_pretax_regular

        # there is no automatic cutoff for aftertax
        a.est_remaining_aftertax_employee += paystub.cur_aftertax_regular

    a.aftertax_limit = a.aggregate_limit + a.catchup_limit - a.pretax_employee - a.pretax_match

    return a


def print_analysis(analysis: AnalyzedPaystub) -> None:
    print(analysis)

    def p(label, value):
        print(f"\t{int(value):>10,}  {label:<40}")

    def diff(value1, value2):
        delta = value1 - value2
        label = "(over contribution)" if delta < 0 else "(under contribution)" if delta > 0 else ""
        p(f"Difference {label}", delta)

    estact = "Actual" if analysis.paystubs_remaining == 0 else "Estimated"
    print(f"{estact} End of Year Summary")

    print("\n\tLIMITS\n")

    p("401k employee contribution (deferral) limit", analysis.deferral_limit)
    if analysis.catchup_limit > 0:
        p("401k employee catch-up limit", analysis.catchup_limit)
    p("AGE-ADJUSTED 401K EMPLOYEE CONTRIBUTION LIMIT", analysis.age_adjusted_deferral_limit)
    print()

    p("Aggregate limit (employer + employee)", analysis.aggregate_limit)
    p(f"Catch up contribution limit (age {analysis.eoy_age})", analysis.catchup_limit)
    p("AGE-ADJUSTED AGGREGATE LIMIT (EMPLOYER + EMPLOYEE)", analysis.age_adjusted_aggregate_limit)

    print("\n\tACTUAL\n")

    p("AGE-ADJUSTED EMPLOYEE CONTRIBUTION (DEFERRAL) LIMIT", analysis.age_adjusted_deferral_limit)
    p("401k employee contribution (actual YTD)", -analysis.ytd_pretax_employee)
    p("401k employee contribution (est remaining)", -analysis.est_remaining_pretax_employee)
    p("TOTAL 401K EMPLOYEE CONTRIBUTION", -analysis.pretax_employee)
    diff(analysis.age_adjusted_deferral_limit, analysis.pretax_employee)
    print()

    p("AGE-ADJUSTED AGGREGATE LIMIT (EMPLOYER + EMPLOYEE)", analysis.age_adjusted_aggregate_limit)
    p("401k employee contribution", -analysis.pretax_employee)
    p("401k employer match", -analysis.pretax_match)
    p("REMAINING LIMIT", analysis.aftertax_limit)
    print()

    p("After-tax contribution limit", analysis.aftertax_limit)
    p("After-tax contribution (actual YTD)", -analysis.ytd_aftertax_employee)
    p("After-tax contribution (est remaining)", -analysis.est_remaining_aftertax_employee)
    overage = analysis.aftertax_employee - analysis.aftertax_limit
    if overage > 0:
        p("After-tax over contribution", overage)
    else:
        p("After-tax under contribution", -overage)


def passfail(label, testfn):
    result = 'PASS' if testfn() else 'FAIL'
    print(f"{result}  {label}")


def print_checks(a: AnalyzedPaystub) -> None:
    passfail('Maxed out employee pre-tax contribution', lambda: a.pretax_employee >= a.deferral_limit)
    passfail(f'Avoided true-up by reaching employee limit in last 2 paychecks (#{a.over_paystub})', lambda: a.over_paystub >= 23)
    passfail('Maxed employer match by contributing at least 5% of eligible pay', lambda: a.pretax_employee / a.base_wages >= 0.05)

    overage = a.aftertax_employee - a.aftertax_limit
    passfail('Maxed out employee after-tax contribution', lambda: overage > 0)


if __name__ == '__main__':
    try:
        # Command-line arguments are considered as immutable constants of the
        # universe, and thus are globally available in this script.
        ARGS = parse_args()
        main()
    except Fail as f:
        print(*f.args, file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("Ctrl+C")
